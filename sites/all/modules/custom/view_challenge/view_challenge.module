<?php
  class NextNodeFindQuery extends EntityFieldQuery {

    public function __contruct() {
      $this->entityCondition('entity_type', 'node');
    }

    public function select_article($nodeId) {
      $this->propertyCondition('nid', $nodeId);

      if (!node_load($nodeId + 1)) {
        $this->propertyCondition('nid',1);
      } else {
        $this->propertyCondition('nid', $nodeId + 1);
      }
    }

    public function getResults() {
      $efqResults = $this->execute();
      if (empty($efqResults)) {
        return array();
      }
      return array_keys($efqResults['node']);
    }
  }
/**
 * Implements hook_menu().
 *
 * Build a Menu Item to link to Custom Page
 */
function view_challenge_menu() {
  $items = array();
  $items['view_challenge'] = array(
    'title' => 'View Challenge',
    'description' => 'Configuration for View Challenge module',
    'page callback' => '_view_challenge_page',
    'access arguments' => array('access view_challenge content'),
    'type' => MENU_NORMAL_ITEM
  );
  return $items;
}


/**
 * Custom Content Function to select article from user input
 */
function view_challenge_contents() {
  $nodes = array();
  $user_input = variable_get('view_challenge_select_article', 3);

//  $query = new NextNodeFindQuery();
//  $query->select_article($user_input);
//  $query_result = $query->getResults();

  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'node')
    ->propertyCondition('nid', $user_input)
    ->propertyCondition('nid', $user_input + 1);
  $qr = $query->execute();
  $query_result = $qr['node'];

  if ($query_result != null) {
    $ids = array_keys($query_result);
    $nodes = entity_load('node', $ids);
  }

  return $nodes;
}


/**
 * Implements hook_form().
 *
 * User inputs a number to pull up a node
 */
function view_challenge_form($form, &$form_state) {
  $form['user_selected_node'] = array(
    '#type' => 'textfield',
    '#title' => t('Choose a post number to view'),
    '#default_value' => variable_get('view_challenge_select_article', 3),
    '#size' => 2,
    '#maxlength' => 2,
    '#description' => t('The maximum number of links to display in the block.'),
    '#required' => TRUE
  );
  return $form;
}


/**
 * Implements validation from the Form API
 *
 * @var int $select_node
 *
 */
function view_challenge_form_validate($form, &$form_state) {
  if (!empty($form_state['value'])){
    $select_node = $form_state['value']['user_selected_node'];

    if (!is_numeric($select_node)) {
      form_set_error('view_challenge_select_article',
        t('You must enter a number for the maximum number of posts to display.'));

    } elseif ($select_node <= 0) {
      form_set_error('view_challenge_select_article',
        t('Maximum number of posts to display must be positive'));
    }
  }
}


/**
 * Custom Page Build
 *
 *
 */
function _view_challenge_page() {

  ///////////////////////////////////////////////////
  // Get the User Selected Article and build display
  ///////////////////////////////////////////////////
  $query_result = view_challenge_contents();

  $items = array();

  foreach($query_result as $node) {
    $items[] = l("Post #".$node->nid." ".$node->title, 'node/'.$node->nid);
  }

  ///////////////////////////////////////////////////
  // Get Total amount of Articles, if user input is
  // greater than the biggest node id, display a
  // error message
  ///////////////////////////////////////////////////
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node');
  $result = $query->execute();
//  $query = new NextNodeFindQuery();
//  $result = $query->getResults();

  if (count($items) < 2) {
    $items = array('Post does not exist, please choose a number equal to or '.
      'lower than '.count($result['node']));
  }

  ///////////////////////////////////////////////////
  // Build a form
  ///////////////////////////////////////////////////
  $form_state = array(
    'rebuild' => true,
    'cache' => true
  );
  $form = drupal_build_form('view_challenge_form', $form_state);
  $form_errors = form_set_error();

  if (!empty($form_errors)) {
    $items = array('No article is available');
  }

  ///////////////////////////////////////////////////
  // Page items
  ///////////////////////////////////////////////////
  $page_array['view_challenge_arguments'] = array(
    '#title' => t('All posts from the last week'),
    '#items' => $items,
    '#form_block' => $form,
    '#theme' => 'select_article__view_challenge'
  );


  return $page_array;
}

/**
 * Implements hook_theme().
 *
 * Custom Theme used with select-article--view-challenge.tpl.php
 */
function view_challenge_theme($existing, $type, $theme, $path) {
  return array(
    'select_article__view_challenge' => array(
      'template' => 'select-article--view-challenge',
      'path' => $path . '/templates',
      'variables' => array(
        'items' => array(),
        'form_block' => array(),
      )
    )
  );
}