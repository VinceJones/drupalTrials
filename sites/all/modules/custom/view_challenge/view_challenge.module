<?php
  class NextNodeFindQuery extends EntityFieldQuery {

    public function __construct() {
      $this->entityCondition('entity_type', 'node');
      $this->entityCondition('bundle', 'article');
      $this->propertyOrderBy('created');
    }

    public function filterByRelatedNode($nodeId) {
      $node = node_load($nodeId);
      $date = $node->created;
      $this->propertyCondition('created', $date, '>');
    }

    public function getResults() {
      $efqResults = $this->execute();
      if (empty($efqResults)) {
        return array();
      }
      return array_keys($efqResults['node']);
    }
  }
/**
 * Implements hook_menu().
 *
 * Build a Menu Item to link to Custom Page
 */
function view_challenge_menu() {
  $items = array();
  $items['view_challenge'] = array(
    'title' => 'View Challenge',
    'description' => 'Configuration for View Challenge module',
    'page callback' => '_view_challenge_page',
    'access arguments' => array('access view_challenge content'),
    'type' => MENU_NORMAL_ITEM
  );
  return $items;
}

/**
 * Implements hook_form().
 *
 * User inputs a number to pull up a node
 */
function view_challenge_form($form, &$form_state) {
  $form['user_selected_article'] = array(
    '#type' => 'textfield',
    '#title' => t('Choose a post number to view'),
    '#size' => 2,
    '#maxlength' => 2,
    '#description' => t('The maximum number of links to display in the block.'),
    '#required' => TRUE
  );
  $form['submit_btn'] = array(
    '#type' => 'submit',
    '#value' => 'Submit'
  );
  return $form;
}


/**
 * Implements validation from the Form API
 *
 * @var int $select_node
 *
 */
function view_challenge_form_validate($form, &$form_state) {
  if (empty($form_state['value']['user_selected_article'])) {
    $select_node = $form_state['value']['user_selected_article'];

    if (!is_numeric($select_node)) {
      form_set_error('user_selected_article',
        t('You must enter a number for the maximum number of posts to display.'));

    } elseif ($select_node <= 0) {
      form_set_error('user_selected_article',
        t('Maximum number of posts to display must be positive'));
    } else {
      $node = node_load($select_node);
      if (empty($node)) {
        form_set_error('user_selected_article',
          t("Article doesn't exist"));
      }
    }
  }
}


/**
 * Custom Page Build
 *
 *
 */
function _view_challenge_page() {
  ///////////////////////////////////////////////////
  // Build a form
  ///////////////////////////////////////////////////
  $form_state = array(
    'rebuild' => true,
    'cache' => true
  );
  $form = drupal_build_form('view_challenge_form', $form_state);
  $form_errors = form_set_error();
  $items = array();

  /**
   * submitted with no errors
   * submitted with errors
   * not submitted no errors
   * not submitted with errors
   */

  if ($form_state['submitted'] == true && empty($form_errors)) {
      $node_set = array();
      $select_article_form_input = $form_state['values']['user_selected_article'];
      $query = new NextNodeFindQuery();
      $query->filterByRelatedNode($select_article_form_input);
      $query->range(0, 2);
      $query_result = $query->getResults();

      if ($query_result != null) {
        $ids = array_keys($query_result);
        $node_set = entity_load('node', $ids);
      }

      $node = node_load($select_article_form_input);
      array_push($node_set, $node);

      foreach($node_set as $node) {
        $items[] = l("Post #".$node->nid." ".$node->title, 'node/'.$node->nid);
      }

  }
  elseif ($form_state['submitted'] == true && !empty($form_errors)) {
    //view_challenge_form_validate('user_selected_article', $form_state);
    $items = array('Submitted but form errors');
  }
  elseif ($form_state['submitted'] == false && empty($form_errors)) {
    $items = array('Please choose an article to view');
  }
  elseif ($form_state['submitted'] == false && !empty($form_errors)) {
    $items = array($form_errors);
  }


  $page_array['view_challenge_arguments'] = array(
    '#title' => t('All posts from the last week'),
    '#items' => $items,
    '#form_block' => $form,
    '#theme' => 'select_article__view_challenge'
  );


  return $page_array;
}

/**
 * Implements hook_theme().
 *
 * Custom Theme used with select-article--view-challenge.tpl.php
 */
function view_challenge_theme($existing, $type, $theme, $path) {
  return array(
    'select_article__view_challenge' => array(
      'template' => 'select-article--view-challenge',
      'path' => $path . '/templates',
      'variables' => array(
        'items' => array(),
        'form_block' => array(),
      )
    )
  );
}

/** THINGS TODO
 * handle the form cases
 * enity field query with no results, but node did successfully load
 * clean up copy and pasted code
 * variable naming
 * code documentation - describe why things happen
 */